- name: allowed-queries
  definition:
    queries:
    - name: users
      query: |-
        query MyQuery {
          user(where: {active: {_eq: true}}) {
            email
            email_confirmed
            group {
              id
              is_school
              name
            }
            id
            manager
            name
          }
        }
    - name: signup
      query: |-
        mutation Signup($email: String!, $password: String!) {
          signup(email: $email, password: $password) {
            errorKnownEmail
            errorWeakPassword
            group
            id
            token
          }
        }
    - name: login
      query: |-
        mutation Login($email: String!, $password: String!) {
          login(email: $email, password: $password) {
            id
            token
            group_id
            error
          }
        }
    - name: insert-observation-student
      query: |-
        mutation InsertObservationStudent($observation_id: bigint!, $student_id: bigint!) {
          insert_eval_observation_student_one(object: {observation_id: $observation_id, student_id: $student_id}) {
            id
            observation_id
            student_id
          }
        }
    - name: delete-observation-student
      query: |-
        mutation DeleteObservationStudent($id: bigint!) {
          delete_eval_observation_student_by_pk(id: $id) {
            id
          }
        }
    - name: update-observation-text
      query: |-
        mutation UpdateObservationText($id: bigint!, $text: String!) {
          update_eval_observation_by_pk(pk_columns: {id: $id}, _set: {text: $text}) {
            id
          }
        }
    - name: insert-frontend-store-error
      query: |-
        mutation InsertFrontendStoreError($user_id: Int!, $error: String!, $action: String!, $response: String!) {
          insert_frontend_store_error_one(object: {action: $action, error: $error, response: $response, user_id: $user_id}) {
            id
          }
        }
    - name: insert-observation-competency
      query: |-
        mutation InsertObservationCompetency($observation_id: bigint!, $competency_id: Int!) {
          insert_eval_observation_competency_one(object: {competency_id: $competency_id, observation_id: $observation_id}) {
            id
            observation_id
            competency_id
          }
        }
    - name: socle
      query: |-
        query Socle {
          c1: socle_container(order_by: {alpha_full_rank: asc}, where: {cycle: {_eq: "c1"}, container_id: {_is_null: true}}) {
            id
            parent {
              id
            }
            children(order_by: {alpha_full_rank: asc}) {
              id
              competencies(order_by: {alpha_full_rank: asc}) {
                id
                subjects(order_by: {subject: {title: asc}}) {
                  id
                  subject {
                    id
                  }
                }
              }
            }
            competencies(order_by: {alpha_full_rank: asc}) {
              id
              subjects(order_by: {subject: {title: asc}}) {
                id
                subject {
                    id
                  }
              }
            }
          }
          c2: socle_container(order_by: {alpha_full_rank: asc}, where: {cycle: {_eq: "c2"}, container_id: {_is_null: true}}) {
            id
            parent {
              id
            }
            children(order_by: {alpha_full_rank: asc}) {
              id
              competencies(order_by: {alpha_full_rank: asc}) {
                id
                subjects(order_by: {subject: {title: asc}}) {
                  id
                  subject {
                    id
                  }
                }
              }
            }
            competencies(order_by: {alpha_full_rank: asc}) {
              id
              subjects(order_by: {subject: {title: asc}}) {
                id
                subject {
                    id
                  }
              }
            }
          }
          c3: socle_container(order_by: {alpha_full_rank: asc}, where: {cycle: {_eq: "c3"}, container_id: {_is_null: true}}) {
            id
            parent {
              id
            }
            children(order_by: {alpha_full_rank: asc}) {
              id
              competencies(order_by: {alpha_full_rank: asc}) {
                id
                subjects(order_by: {subject: {title: asc}}) {
                  id
                  subject {
                    id
                  }
                }
              }
            }
            competencies(order_by: {alpha_full_rank: asc}) {
              id
              subjects(order_by: {subject: {title: asc}}) {
                id
                subject {
                    id
                  }
              }
            }
          }
          c4: socle_container(order_by: {alpha_full_rank: asc}, where: {cycle: {_eq: "c4"}, container_id: {_is_null: true}}) {
            id
            parent {
              id
            }
            children(order_by: {alpha_full_rank: asc}) {
              id
              competencies(order_by: {alpha_full_rank: asc}) {
                id
                subjects(order_by: {subject: {title: asc}}) {
                  id
                  subject {
                    id
                  }
                }
              }
            }
            competencies(order_by: {alpha_full_rank: asc}) {
              id
              subjects(order_by: {subject: {title: asc}}) {
                id
                subject {
                    id
                  }
              }
            }
          }
          competencies: socle_competency {
            container {
              id
            }
            cycle
            full_rank
            id
            rank
            text
            subjects(order_by: {subject: {title: asc}}) {
              id
            }
          }
          containers: socle_container {
            id
            full_rank
            cycle
            rank
            text
          }
          subjects: socle_subject {
            id
            title
          }
        }
    - name: observations-sorted-created-at
      query: |-
        query Observations($limit: Int!, $offset: Int!) {
          eval_observation(limit: $limit, order_by: {created_at: desc}, offset: $offset) {
            id
            date
            created_at
            updated_at
            text
            user {
              id
            }
            competencies(order_by: {competency: {alpha_full_rank: asc}}) {
              competency {
                id
              }
            }
            students(order_by: {student: {fullname: {fullname: asc}}}) {
              id
            }
          }
        }
    - name: evaluation-by-student-competency
      query: |-
        query Evaluation($student_id: bigint!, $competency_id: Int!) {
          eval_evaluation(order_by: {period: {end: desc}}, where: {student_id: {_eq: $student_id}, competency_id: {_eq: $competency_id}}) {
            comment
            id
            created_at
            status
            period {
              id
            }
            updated_at
            user {
              id
            }
            date
            student {
              id
            }
            competency {
              id
            }
          }
        }
    - name: update-group-name
      query: |-
        mutation UpdateGroupName($group_id: bigint!, $name: String!) {
          update_group_by_pk(pk_columns: {id: $group_id}, _set: {name: $name}) {
            id
          }
        }
    - name: insert-period
      query: |-
        mutation InsertPeriod($group_id: bigint!, $name: String!, $start: date!, $end: date!) {
          insert_eval_period_one(object: {group_id: $group_id, name: $name, start: $start, end: $end}) {
            id
            created_at
            end
            group_id
            name
            start
            updated_at
          }
        }
    - name: periods
      query: |-
        query Periods {
          periods: eval_period(order_by: {end: desc}) {
            created_at
            end
            id
            name
            start
            updated_at
          }
        }
    - name: set-user-name
      query: |-
        mutation setUserName($user_id: bigint!, $firstname: String!, $lastname: String!) {
          update_user_by_pk(pk_columns: {id: $user_id}, _set: {firstname: $firstname, lastname: $lastname}) {
            id
          }
        }
    - name: observation
      query: |-
        query ObservationByPk($id: bigint!) {
          eval_observation_by_pk(id: $id) {
            id
            created_at
            text
            date
            updated_at
            user_id
            students(order_by: {student: {fullname: {fullname: asc}}}) {
              student_id
              id
            }
            competencies(order_by: {competency: {alpha_full_rank: asc}}) {
              id
              competency_id
            }
            period {
              id
            }
          }
        }
    - name: insert-observation
      query: |-
        mutation InsertEvalObservation($text: String!, $user_id: bigint!, $date: date!, $eval_period_id: Int) {
          insert_eval_observation_one(object: {text: $text, user_id: $user_id, eval_period_id: $eval_period_id, date: $date}) {
            id
            created_at
          }
        }
    - name: update-observation-date
      query: |-
        mutation UpdatebservationDate($id: bigint!, $date: date!, $eval_period_id: Int) {
          update_eval_observation_by_pk(pk_columns: {id: $id}, _set: {date: $date, eval_period_id: $eval_period_id}) {
            id
          }
        }
    - name: students
      query: |-
        query Student {
          student(order_by: {fullname: {fullname: asc}}) {
            birthdate
            firstname
            group_id
            id
            lastname
            school_entry
            school_exit
          }
        }
    - name: boot
      query: |-
        query Boot($group_id: bigint!) {
          group: group {
            id
            is_school
            name
            payment_ok
            users(order_by: {firstname: asc}) {
              id
            }
          }
          users: user(order_by: {firstname: asc}, where: {active: {_eq: true}}) {
            email
            email_confirmed
            firstname
            id
            lastname
            manager
          }
          periods: eval_period(order_by: {end: desc}, where: {group_id: {_eq: $group_id}}) {
            created_at
            end
            id
            name
            start
            updated_at
            students(order_by: {student: {fullname: {fullname: asc}}}, where: {student: {group_id: {_eq: $group_id}}}) {
              student {
                id
              }
            }
          }
          students: student(order_by: {fullname: {fullname: asc}}) {
            birthdate
            firstname
            group_id
            id
            lastname
            school_entry
            school_exit
          }
        }
    - name: insert-evaluation
      query: |-
        mutation InsertEvaluation($student_id: bigint!, $competency_id: Int!, $status: eval_status!, $comment: String!, $date: date!, $eval_period_id: Int, $user_id: bigint!) {
          insert_eval_evaluation_one(object: {comment: $comment, competency_id: $competency_id, date: $date, eval_period_id: $eval_period_id, status: $status, student_id: $student_id, user_id: $user_id}) {
            comment
            created_at
            date
            id
            status
            updated_at
            period {
              id
            }
            user {
              id
            }
            student {
              id
            }
            competency {
              id
            }
          }
        }
